import warnings
from typing import Sequence

from bs4 import BeautifulSoup, MarkupResemblesLocatorWarning

from spells_bot.config import settings
from spells_bot.pathfinder_api.schemas import BotClassInfo, BotSpellInfo

warnings.filterwarnings("ignore", category=MarkupResemblesLocatorWarning)


def _validate_message_len(msg: str):
    """Validate message length against telegram API limits

    Args:
        msg: text to be validated. Any markup should be included in the string

    Returns:
        True if text can fit in one telegram message, False otherwise
    """
    return len(msg.encode("utf-8")) < 4096


def _menu_message_header(text: str):
    return f"<b>{text}</b>\n\n"


def start_main():
    return (
        f"{_menu_message_header('üìñ –ö–Ω–∏–≥–∞ –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–π Pathfinder 1e üîÆ')}"
        "/spellbook - –æ—Ç–∫—Ä—ã—Ç—å –º–æ—é –∫–Ω–∏–≥—É\n"
        "/help - –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–∏–≥–æ–π\n"
        "/menu - –ø–æ–∏—Å–∫ –ø–æ –∫–ª–∞—Å—Å–∞–º\n"
        "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞\n"
    )


def help_main(bot_name: str):
    return (
        f"{_menu_message_header('üìñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–∏–≥–æ–π ‚Ñπ')}"
        "–í —ç—Ç–æ–π –∫–Ω–∏–≥–µ –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è.\n\n"
        f"–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å\n\n<code>@{bot_name} –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è</code>\n\n"
        "–≤ –ª—é–±–æ–º —á–∞—Ç–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç.\n"
        "–ï–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Å–≤–æ—é –∫–Ω–∏–≥—É –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /spellbook\n\n"
        "–î–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ /menu.\n\n"
        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–Ω–∏–≥–∞–º –ø—Ä–∞–≤–∏–ª –≤ /settings –∏–ª–∏ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞, –≤—ã–±—Ä–∞–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–Ω–∏–∑—É —Å–ø–∏—Å–∫–∞."
    )


def menu_main():
    return f"{_menu_message_header('üìñ –ü–æ–∏—Å–∫ –ø–æ –∫–ª–∞—Å—Å–∞–º üîÆ')}"


def menu_class(class_: BotClassInfo):
    header = _menu_message_header(f"üìñ {class_.name} üîÆ")
    return f"{header}<i>{class_.description}</i>"


def menu_class_spell_level(class_: BotClassInfo, spells: Sequence[BotSpellInfo], spell_level: int):
    spell_description_pages = []
    header = _menu_message_header(f"{class_.name} {spell_level} –∫—Ä—É–≥")
    current_page = header

    for s in spells:
        spell_line = f"<u>{s.name}</u>: <i>{s.shortDescription}</i>"
        possible_current_page = "\n".join([current_page, spell_line])

        if _validate_message_len(possible_current_page):
            current_page = possible_current_page
        else:
            spell_description_pages.append(current_page)
            current_page = "\n".join([header, spell_line])

    spell_description_pages.append(current_page)

    return spell_description_pages


def spellbook_empty():
    return '–ö–Ω–∏–≥–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –∏ –Ω–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–Ω–∏–≥—É –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π"'


def spellbook_main(spell: BotSpellInfo, extended: bool):
    tables = None
    if extended:
        text, tables = extended_description_message(spell)
    else:
        text = short_description_message_with_optional_values(spell)
    return text, tables


def spellbook_main_after_delete_spell():
    return "–£–¥–∞–ª–µ–Ω–æ"


def settings_main(bot_name: str):
    return (
        f"{_menu_message_header('üìñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ ‚öô')}"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥–∏ –ø—Ä–∞–≤–∏–ª, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è. "
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ /menu –∏ –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ @{bot_name}. "
    )


def _insert_into_html_template(html: str):
    return f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Title</title>
    </head>
    <body>
        {html}
    </body>
    </html>
    """


def _remove_fraction_values_from_table(soup: BeautifulSoup):
    soup.find("a", {"class": "changeFraction"}).extract()

    for fraction_hidden in soup.find_all("span", {"class": "fraction hidden"}):
        fraction_hidden.extract()


def _remove_html_tags(html: str, keep_links: bool):
    soup = BeautifulSoup(html, "html.parser")

    table_divs = soup.find_all("div", {"class": "tableBlock"})
    tables = []
    for div in table_divs:
        t = div.extract()
        tables.append(str(t))

    subheader_spans = soup.find_all("span", {"class": "textSubheader"})
    for span in subheader_spans:
        new_tag = soup.new_tag("i")
        new_tag.string = span.text
        span.replace_with(new_tag)

    dfn_tags = soup.find_all("dfn")
    for dfn_tag in dfn_tags:
        new_tag = soup.new_tag("i")
        new_tag.string = dfn_tag.text
        dfn_tag.replace_with(new_tag)

    ul_tags = soup.find_all("ul")
    for ul in ul_tags:
        for li in ul.find_all_next("li"):
            li.replace_with(f"- {li.text}")
        ul.replace_with(ul.text)

    a_tags = soup.find_all("a")
    for a_tag in a_tags:
        if keep_links:
            a_tag["href"] = f"{settings.api.base_web_url}{a_tag['href']}"
        else:
            a_tag.replace_with(a_tag.text)

    clean_html = str(soup)

    return clean_html, tables


def _make_header(spell: BotSpellInfo):
    helpers = []
    if spell.helpers:
        for h in spell.helpers:
            if h.alias:
                helper = f'<a href="{h.alias}">{h.name}</a>'
            else:
                helper = h.name
            helpers.append(helper)

    if helpers:
        helpers_line = "\n–ü–µ—Ä–µ–≤–æ–¥: " + ", ".join(helpers) + "\n"
    else:
        helpers_line = ""

    return f"<b>{spell.name.upper()}</b> ({spell.engName.upper()})\n{spell.school.name}\n{helpers_line}"


def _make_optional_values(spell: BotSpellInfo):
    optional_rows = []

    if spell.spellResistance:
        if spell.spellResistance == 0:
            spell_resistance = "–ù–µ—Ç"
        elif spell.spellResistance == 1:
            spell_resistance = "–î–∞"
        else:
            spell_resistance = spell.spellResistance
    else:
        spell_resistance = None

    value_map = {
        f"–ò—Å—Ç–æ—á–Ω–∏–∫": spell.book.name,
        f"–ö—Ä—É–≥": ", ".join(c.name + " " + str(c.level) for c in spell.classes),
        f"–í—Ä–µ–º—è —Å–æ—Ç–≤–æ—Ä–µ–Ω–∏—è": spell.castingTime,
        f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã": spell.components,
        f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è": spell.area,
        f"–≠—Ñ—Ñ–µ–∫—Ç": spell.effect,
        f"–¶–µ–ª—å": spell.target,
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": spell.duration,
        f"–ò—Å–ø—ã—Ç–∞–Ω–∏–µ": spell.savingThrow,
        f"–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –º–∞–≥–∏–∏": spell_resistance,
    }
    for k, v in value_map.items():
        if v is not None:
            optional_rows.append(f"<b>{k}</b>: {v}")
    return "\n".join(optional_rows)


def _make_extended_description(spell: BotSpellInfo):
    return _remove_html_tags(spell.description, keep_links=True)


def _make_short_description(spell: BotSpellInfo, keep_links: bool):
    clean_html, _ = _remove_html_tags(spell.shortDescription, keep_links=keep_links)
    return clean_html


def class_table_feature(class_: BotClassInfo):
    soup = BeautifulSoup(class_.tableFeatures, "html.parser")

    _remove_fraction_values_from_table(soup)

    clean_html = str(soup)
    return clean_html


def class_table_spell_count(class_: BotClassInfo):
    soup = BeautifulSoup(class_.tableSpellCount, "html.parser")

    clean_html = str(soup)
    return clean_html


def short_description_message(spell: BotSpellInfo, keep_links: bool):
    text = _make_short_description(spell, keep_links=keep_links)

    return text


def short_description_message_with_optional_values(spell: BotSpellInfo):
    text = f"{_make_header(spell)}\n{_make_short_description(spell, keep_links=True)}\n\n{_make_optional_values(spell)}"

    return text


def extended_description_message(spell: BotSpellInfo):
    extended_description, tables = _make_extended_description(spell)
    text = "\n\n".join([_make_header(spell), _make_optional_values(spell), extended_description])

    if not _validate_message_len(text):
        text = short_description_message_with_optional_values(spell)
        text = (
            f"{text}\n\n"
            "–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —á—Ç–æ–±—ã —É–º–µ—Å—Ç–∏—Ç—å –µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —Å–∞–π—Ç."
        )

    return text, tables


def empty_inline_results_message(query: str):
    return (
        f'–ü–æ –∑–∞–ø—Ä–æ—Å—É "{query[:100]}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n'
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–Ω–∏–≥–∞–º –≤ –º–µ–Ω—é /settings "
        "–∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä—å—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–æ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –ª–∏–±–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –ª–∏–±–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ."
    )


def toast_drawing_tables():
    return "–†–∏—Å—É—é —Ç–∞–±–ª–∏—Ü—ã, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
